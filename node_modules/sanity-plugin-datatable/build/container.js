'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _patchEvent = require('part:@sanity/form-builder/patch-event');

var _patchEvent2 = _interopRequireDefault(_patchEvent);

var _primitives = require('./primitives');

var _table = require('./table');

var _table2 = _interopRequireDefault(_table);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Import dependencies
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

/**
 * Container
 */

var Container = function (_Component) {
  _inherits(Container, _Component);

  function Container(props) {
    _classCallCheck(this, Container);

    var _this = _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props));

    _this.handleAddRow = _this.handleAddRow.bind(_this);
    _this.handleAddColumn = _this.handleAddColumn.bind(_this);
    _this.handleCellChange = _this.handleCellChange.bind(_this);

    var _props$value = props.value;
    _props$value = _props$value === undefined ? {} : _props$value;
    var _props$value$rows = _props$value.rows,
        rows = _props$value$rows === undefined ? [] : _props$value$rows;

    /**
     * Find out how many rows we have
     */

    var columns = rows.map(function (row) {
      return !row ? 0 : !row.cells ? 0 : row.cells.length;
    });

    /**
     * Set rows and columns
     */

    _this.state = {
      columns: Math.max.apply(Math, _toConsumableArray(columns).concat([0])),
      rows: rows.length
    };
    return _this;
  }

  /**
   * Add rows and columns
   */

  _createClass(Container, [{
    key: 'handleAddRow',
    value: function handleAddRow(type) {
      var _state = this.state,
          rows = _state.rows,
          columns = _state.columns;


      this.setState({
        rows: rows + 1,
        columns: columns === 0 ? 1 : columns
      });
    }
  }, {
    key: 'handleAddColumn',
    value: function handleAddColumn() {
      var _state2 = this.state,
          columns = _state2.columns,
          rows = _state2.rows;


      this.setState({
        columns: columns + 1,
        rows: rows === 0 ? 1 : rows
      });
    }

    /**
     * Add a patch event to Sanity
     */

  }, {
    key: 'handleCellChange',
    value: function handleCellChange(e, row, column) {
      var input = e.target.value;
      var _props = this.props,
          onChange = _props.onChange,
          value = _props.value,
          _props$type = _props.type;
      _props$type = _props$type === undefined ? {} : _props$type;
      var name = _props$type.name;

      /**
       * Get all table data
       */

      var updatedData = (0, _lodash.cloneDeep)(value) || {};

      /**
       * Convert all null values to strings
       */

      var convertNulls = function convertNulls() {
        var rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        return (0, _lodash.range)(rows.length).map(function (index) {
          var row = rows[index];

          return {
            _type: row && row._type ? row._type : 'column',
            _key: row && row._key ? row._key : _uuid2.default.v4(),
            cells: row && row.cells ? (0, _lodash.range)(row.cells.length).map(function (cellIndex) {
              var cell = row.cells[cellIndex];
              return cell ? cell : '';
            }) : []
          };
        });
      };

      updatedData.rows = convertNulls(updatedData.rows);

      /**
       * Add rows if not existing
       */

      if (!updatedData.rows[row]) {
        updatedData.rows[row] = {
          _type: 'column',
          _key: _uuid2.default.v4(),
          cells: []
        };
      }

      /**
       * Add new values do data
       */

      updatedData.rows[row].cells[column] = input;

      /**
       * Check for null values again
       */

      updatedData.rows = convertNulls(updatedData.rows);

      /**
       * Add Sanity patch
       */

      onChange(_patchEvent2.default.from([(0, _patchEvent.setIfMissing)({ _type: 'table' }), updatedData ? (0, _patchEvent.set)(updatedData) : (0, _patchEvent.unset)(name)]));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          _props2$value = _props2.value;
      _props2$value = _props2$value === undefined ? {} : _props2$value;
      var _props2$value$rows = _props2$value.rows,
          rowsContent = _props2$value$rows === undefined ? [] : _props2$value$rows,
          _props2$type = _props2.type;
      _props2$type = _props2$type === undefined ? {} : _props2$type;
      var title = _props2$type.title;
      var _state3 = this.state,
          columns = _state3.columns,
          rows = _state3.rows;

      /**
       * Map data to multidimensional array
       * [[0, 1], [2, 3]]
       */

      var tableData = rowsContent.map(function (row) {
        return row && row.cells && row.cells;
      });

      /**
       * Render
       */

      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _primitives.Heading,
          null,
          title
        ),
        _react2.default.createElement(_table2.default, {
          data: tableData,
          rows: rows,
          columns: columns,
          handleChange: this.handleCellChange
        }),
        _react2.default.createElement(_default2.default, {
          onClick: this.handleAddRow,
          children: 'Add row'
        }),
        _react2.default.createElement(_default2.default, {
          onClick: this.handleAddColumn,
          children: 'Add column',
          style: { float: 'right' }
        })
      );
    }
  }]);

  return Container;
}(_react.Component);

exports.default = Container;